# Generated by Django 4.2.1 on 2023-06-08 10:53

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Addr',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('tlid', models.BigIntegerField(blank=True, null=True)),
                ('fromhn', models.CharField(blank=True, max_length=12, null=True)),
                ('tohn', models.CharField(blank=True, max_length=12, null=True)),
                ('side', models.CharField(blank=True, max_length=1, null=True)),
                ('zip', models.CharField(blank=True, max_length=5, null=True)),
                ('plus4', models.CharField(blank=True, max_length=4, null=True)),
                ('fromtyp', models.CharField(blank=True, max_length=1, null=True)),
                ('totyp', models.CharField(blank=True, max_length=1, null=True)),
                ('fromarmid', models.IntegerField(blank=True, null=True)),
                ('toarmid', models.IntegerField(blank=True, null=True)),
                ('arid', models.CharField(blank=True, max_length=22, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'addr',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Addrfeat',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('tlid', models.BigIntegerField(blank=True, null=True)),
                ('statefp', models.CharField(max_length=2)),
                ('aridl', models.CharField(blank=True, max_length=22, null=True)),
                ('aridr', models.CharField(blank=True, max_length=22, null=True)),
                ('linearid', models.CharField(blank=True, max_length=22, null=True)),
                ('fullname', models.CharField(blank=True, max_length=100, null=True)),
                ('lfromhn', models.CharField(blank=True, max_length=12, null=True)),
                ('ltohn', models.CharField(blank=True, max_length=12, null=True)),
                ('rfromhn', models.CharField(blank=True, max_length=12, null=True)),
                ('rtohn', models.CharField(blank=True, max_length=12, null=True)),
                ('zipl', models.CharField(blank=True, max_length=5, null=True)),
                ('zipr', models.CharField(blank=True, max_length=5, null=True)),
                ('edge_mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('parityl', models.CharField(blank=True, max_length=1, null=True)),
                ('parityr', models.CharField(blank=True, max_length=1, null=True)),
                ('plus4l', models.CharField(blank=True, max_length=4, null=True)),
                ('plus4r', models.CharField(blank=True, max_length=4, null=True)),
                ('lfromtyp', models.CharField(blank=True, max_length=1, null=True)),
                ('ltotyp', models.CharField(blank=True, max_length=1, null=True)),
                ('rfromtyp', models.CharField(blank=True, max_length=1, null=True)),
                ('rtotyp', models.CharField(blank=True, max_length=1, null=True)),
                ('offsetl', models.CharField(blank=True, max_length=1, null=True)),
                ('offsetr', models.CharField(blank=True, max_length=1, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'addrfeat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bg',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('tractce', models.CharField(blank=True, max_length=6, null=True)),
                ('blkgrpce', models.CharField(blank=True, max_length=1, null=True)),
                ('bg_id', models.CharField(max_length=12, primary_key=True, serialize=False)),
                ('namelsad', models.CharField(blank=True, max_length=13, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.FloatField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bg',
                'db_table_comment': 'block groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonAsyncrequest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('date_responded', models.DateTimeField(blank=True, null=True)),
                ('receiver', models.CharField(max_length=200)),
                ('uuid', models.UUIDField()),
                ('request_message', models.JSONField(blank=True, null=True)),
                ('request_response', models.JSONField(blank=True, null=True)),
                ('async_response', models.JSONField(blank=True, null=True)),
                ('state', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'common_asyncrequest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonBin',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('bin_id', models.SmallIntegerField(unique=True)),
                ('max_filling', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'common_bin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonBinfilling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
            ],
            options={
                'db_table': 'common_binfilling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonBuffer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tray_order', models.TextField()),
                ('out_of_buffer', models.IntegerField(blank=True, null=True)),
                ('end_effector', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('priority_num', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'common_buffer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonCommandlog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('date_processed', models.DateTimeField()),
                ('direction', models.CharField(max_length=250)),
                ('command', models.CharField(max_length=250)),
                ('payload', models.JSONField(blank=True, null=True)),
                ('success', models.BooleanField()),
                ('result', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'common_commandlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonConveyorarea',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('x_start', models.FloatField()),
                ('x_end', models.FloatField()),
            ],
            options={
                'db_table': 'common_conveyorarea',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonConveyorareafilling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('last_seen_encoder_value', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('alpha', models.FloatField()),
            ],
            options={
                'db_table': 'common_conveyorareafilling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonCutter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('priority_num', models.IntegerField(unique=True)),
                ('offload_ready', models.BooleanField()),
            ],
            options={
                'db_table': 'common_cutter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonEndeffector',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('date_created', models.DateTimeField()),
                ('end_effector_id', models.IntegerField(unique=True)),
                ('shape', models.TextField()),
                ('tcp', models.TextField()),
            ],
            options={
                'db_table': 'common_endeffector',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonEndeffectorAllowedProcesses',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'common_endeffector_allowed_processes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonEnvironment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('plc_mode', models.CharField(blank=True, max_length=200, null=True)),
                ('conveyor_state', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'common_environment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonEventlist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_fields', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'common_eventlist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonMaterial',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('material_id', models.CharField(max_length=200)),
                ('coloured_thread_side', models.IntegerField()),
                ('rev', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=200)),
                ('thickness', models.FloatField()),
                ('density', models.FloatField(blank=True, null=True)),
                ('stiffness0', models.FloatField()),
                ('stiffness45', models.FloatField(blank=True, null=True)),
                ('stiffness90', models.FloatField(blank=True, null=True)),
                ('hold_distance0', models.FloatField()),
                ('hold_distance45', models.FloatField(blank=True, null=True)),
                ('hold_distance90', models.FloatField(blank=True, null=True)),
                ('backer_color_check', models.BooleanField()),
                ('excess_backer_top', models.FloatField()),
                ('excess_backer_bottom', models.FloatField()),
                ('vacuum_perc', models.FloatField()),
                ('vacuum_radius_min', models.FloatField()),
                ('vacuum_radius_max', models.FloatField()),
                ('cup_activation_time', models.FloatField()),
                ('cup_deactivation_time', models.FloatField()),
                ('ply_lift_speed', models.FloatField()),
                ('ply_lift_accel', models.FloatField()),
                ('robot_speed', models.FloatField()),
                ('robot_accel', models.FloatField()),
                ('buffer_speed', models.FloatField()),
                ('buffer_accel', models.FloatField()),
                ('fiber_dir_type', models.IntegerField()),
                ('max_sagging_bridge', models.FloatField(blank=True, null=True)),
                ('stiffness_angle', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'common_material',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonNest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sequence_num', models.IntegerField()),
                ('state', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'common_nest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonNestfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nest_file', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'common_nestfile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonOffloadarea',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('offload_area_id', models.IntegerField(unique=True)),
                ('x_start', models.FloatField()),
                ('x_end', models.FloatField()),
            ],
            options={
                'db_table': 'common_offloadarea',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonOffloadareafilling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('insert_x', models.FloatField()),
                ('insert_y', models.FloatField()),
                ('sequence_num', models.IntegerField()),
            ],
            options={
                'db_table': 'common_offloadareafilling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonPickinstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pose_x', models.FloatField()),
                ('pose_y', models.FloatField()),
                ('pose_a', models.FloatField()),
                ('ee_active_suction_cup_ids', models.TextField()),
                ('ee_active_edge_cup_ids', models.TextField()),
                ('ee_active_sensor_ids', models.TextField()),
                ('data', models.JSONField()),
                ('pose_z', models.FloatField()),
            ],
            options={
                'db_table': 'common_pickinstruction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonPly',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('shape', models.TextField(blank=True, null=True)),
                ('insert_dxf_x', models.FloatField()),
                ('insert_dxf_y', models.FloatField()),
                ('date_cut', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(max_length=20, unique=True)),
                ('data', models.JSONField()),
                ('date_added', models.DateTimeField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
            ],
            options={
                'db_table': 'common_ply',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonPlysupply',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('priority_num', models.IntegerField()),
            ],
            options={
                'db_table': 'common_plysupply',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonPlysupplyrequest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
            ],
            options={
                'db_table': 'common_plysupplyrequest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonPlytype',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('shape', models.TextField(blank=True, null=True)),
                ('max_tray_filling_count', models.IntegerField()),
                ('min_iou', models.FloatField()),
                ('pressure_pick', models.FloatField()),
                ('pressure_move', models.FloatField()),
                ('extra_fields', models.JSONField(blank=True, null=True)),
                ('max_ply_supply_filling_count', models.IntegerField()),
            ],
            options={
                'db_table': 'common_plytype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonProcess',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'common_process',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonProduct',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sequence_num', models.IntegerField()),
                ('state', models.CharField(max_length=20)),
                ('end_destination', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'common_product',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonProductdefinition',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('max_tray_filling_count', models.IntegerField()),
            ],
            options={
                'db_table': 'common_productdefinition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonProductdefinitionfilling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sequence', models.IntegerField()),
            ],
            options={
                'db_table': 'common_productdefinitionfilling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonProductfilling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_ply_added', models.DateTimeField(blank=True, null=True)),
                ('layer', models.IntegerField()),
                ('zone', models.CharField(max_length=20)),
                ('place_position_x', models.FloatField()),
                ('place_position_y', models.FloatField()),
                ('place_angle', models.FloatField()),
                ('vacuum_zone_ids', models.TextField()),
                ('state', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'common_productfilling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonRejectionrequest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('object_id', models.IntegerField()),
            ],
            options={
                'db_table': 'common_rejectionrequest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonRoll',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('batch_id', models.CharField(max_length=200)),
                ('roll_id', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'common_roll',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonSensor',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sensor_id', models.IntegerField()),
                ('center_x', models.FloatField()),
                ('center_y', models.FloatField()),
                ('radius', models.FloatField()),
            ],
            options={
                'db_table': 'common_sensor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonStrategy',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('process_name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'common_strategy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonSuctioncup',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('suction_cup_id', models.IntegerField()),
                ('center_x', models.FloatField()),
                ('center_y', models.FloatField()),
                ('radius', models.FloatField()),
                ('activateable', models.BooleanField()),
            ],
            options={
                'db_table': 'common_suctioncup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonTableweldinstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_welded', models.DateTimeField(blank=True, null=True)),
                ('table_active_welding_unit_ids', models.TextField()),
                ('state', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'common_tableweldinstruction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonTask',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('subsystem', models.CharField(max_length=200)),
                ('command', models.IntegerField()),
                ('data', models.JSONField(blank=True, null=True)),
                ('uuid', models.UUIDField(unique=True)),
                ('state', models.CharField(max_length=20)),
                ('date_created', models.DateTimeField()),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('date_rejected_canceled', models.DateTimeField(blank=True, null=True)),
                ('date_done', models.DateTimeField(blank=True, null=True)),
                ('task_flow', models.JSONField()),
            ],
            options={
                'db_table': 'common_task',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonTray',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reserved_sequence_nr', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'common_tray',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonTrayfilling',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sequence', models.IntegerField()),
            ],
            options={
                'db_table': 'common_trayfilling',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonTrayrequest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
            ],
            options={
                'db_table': 'common_trayrequest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonWeldingtable',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('priority_num', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'common_weldingtable',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonWeldingunit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('welding_unit_id', models.IntegerField()),
                ('center_x', models.FloatField()),
                ('center_y', models.FloatField()),
                ('radius', models.FloatField()),
            ],
            options={
                'db_table': 'common_weldingunit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonWeldinstruction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_welded', models.DateTimeField(blank=True, null=True)),
                ('ee_active_welding_unit_ids', models.TextField()),
                ('weld_point_x', models.FloatField()),
                ('weld_point_y', models.FloatField()),
                ('weld_point_a', models.FloatField()),
                ('state', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'common_weldinstruction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommonWorkorder',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('uuid', models.UUIDField(unique=True)),
                ('date_created', models.DateTimeField()),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('date_finished', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(max_length=20)),
                ('data', models.JSONField()),
            ],
            options={
                'db_table': 'common_workorder',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('countyns', models.CharField(blank=True, max_length=8, null=True)),
                ('cntyidfp', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('namelsad', models.CharField(blank=True, max_length=100, null=True)),
                ('lsad', models.CharField(blank=True, max_length=2, null=True)),
                ('classfp', models.CharField(blank=True, max_length=2, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('csafp', models.CharField(blank=True, max_length=3, null=True)),
                ('cbsafp', models.CharField(blank=True, max_length=5, null=True)),
                ('metdivfp', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.BigIntegerField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'county',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CountyLookup',
            fields=[
                ('st_code', models.IntegerField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('co_code', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=90, null=True)),
            ],
            options={
                'db_table': 'county_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CountysubLookup',
            fields=[
                ('st_code', models.IntegerField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('co_code', models.IntegerField()),
                ('county', models.CharField(blank=True, max_length=90, null=True)),
                ('cs_code', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=90, null=True)),
            ],
            options={
                'db_table': 'countysub_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cousub',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('cousubfp', models.CharField(blank=True, max_length=5, null=True)),
                ('cousubns', models.CharField(blank=True, max_length=8, null=True)),
                ('cosbidfp', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('namelsad', models.CharField(blank=True, max_length=100, null=True)),
                ('lsad', models.CharField(blank=True, max_length=2, null=True)),
                ('classfp', models.CharField(blank=True, max_length=2, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('cnectafp', models.CharField(blank=True, max_length=3, null=True)),
                ('nectafp', models.CharField(blank=True, max_length=5, null=True)),
                ('nctadvfp', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.DecimalField(blank=True, decimal_places=0, max_digits=14, null=True)),
                ('awater', models.DecimalField(blank=True, decimal_places=0, max_digits=14, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cousub',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DirectionLookup',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('abbrev', models.CharField(blank=True, max_length=3, null=True)),
            ],
            options={
                'db_table': 'direction_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Edges',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('tlid', models.BigIntegerField(blank=True, null=True)),
                ('tfidl', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('tfidr', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('fullname', models.CharField(blank=True, max_length=100, null=True)),
                ('smid', models.CharField(blank=True, max_length=22, null=True)),
                ('lfromadd', models.CharField(blank=True, max_length=12, null=True)),
                ('ltoadd', models.CharField(blank=True, max_length=12, null=True)),
                ('rfromadd', models.CharField(blank=True, max_length=12, null=True)),
                ('rtoadd', models.CharField(blank=True, max_length=12, null=True)),
                ('zipl', models.CharField(blank=True, max_length=5, null=True)),
                ('zipr', models.CharField(blank=True, max_length=5, null=True)),
                ('featcat', models.CharField(blank=True, max_length=1, null=True)),
                ('hydroflg', models.CharField(blank=True, max_length=1, null=True)),
                ('railflg', models.CharField(blank=True, max_length=1, null=True)),
                ('roadflg', models.CharField(blank=True, max_length=1, null=True)),
                ('olfflg', models.CharField(blank=True, max_length=1, null=True)),
                ('passflg', models.CharField(blank=True, max_length=1, null=True)),
                ('divroad', models.CharField(blank=True, max_length=1, null=True)),
                ('exttyp', models.CharField(blank=True, max_length=1, null=True)),
                ('ttyp', models.CharField(blank=True, max_length=1, null=True)),
                ('deckedroad', models.CharField(blank=True, max_length=1, null=True)),
                ('artpath', models.CharField(blank=True, max_length=1, null=True)),
                ('persist', models.CharField(blank=True, max_length=1, null=True)),
                ('gcseflg', models.CharField(blank=True, max_length=1, null=True)),
                ('offsetl', models.CharField(blank=True, max_length=1, null=True)),
                ('offsetr', models.CharField(blank=True, max_length=1, null=True)),
                ('tnidf', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('tnidt', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'edges',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Faces',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('tfid', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('statefp00', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp00', models.CharField(blank=True, max_length=3, null=True)),
                ('tractce00', models.CharField(blank=True, max_length=6, null=True)),
                ('blkgrpce00', models.CharField(blank=True, max_length=1, null=True)),
                ('blockce00', models.CharField(blank=True, max_length=4, null=True)),
                ('cousubfp00', models.CharField(blank=True, max_length=5, null=True)),
                ('submcdfp00', models.CharField(blank=True, max_length=5, null=True)),
                ('conctyfp00', models.CharField(blank=True, max_length=5, null=True)),
                ('placefp00', models.CharField(blank=True, max_length=5, null=True)),
                ('aiannhfp00', models.CharField(blank=True, max_length=5, null=True)),
                ('aiannhce00', models.CharField(blank=True, max_length=4, null=True)),
                ('comptyp00', models.CharField(blank=True, max_length=1, null=True)),
                ('trsubfp00', models.CharField(blank=True, max_length=5, null=True)),
                ('trsubce00', models.CharField(blank=True, max_length=3, null=True)),
                ('anrcfp00', models.CharField(blank=True, max_length=5, null=True)),
                ('elsdlea00', models.CharField(blank=True, max_length=5, null=True)),
                ('scsdlea00', models.CharField(blank=True, max_length=5, null=True)),
                ('unsdlea00', models.CharField(blank=True, max_length=5, null=True)),
                ('uace00', models.CharField(blank=True, max_length=5, null=True)),
                ('cd108fp', models.CharField(blank=True, max_length=2, null=True)),
                ('sldust00', models.CharField(blank=True, max_length=3, null=True)),
                ('sldlst00', models.CharField(blank=True, max_length=3, null=True)),
                ('vtdst00', models.CharField(blank=True, max_length=6, null=True)),
                ('zcta5ce00', models.CharField(blank=True, max_length=5, null=True)),
                ('tazce00', models.CharField(blank=True, max_length=6, null=True)),
                ('ugace00', models.CharField(blank=True, max_length=5, null=True)),
                ('puma5ce00', models.CharField(blank=True, max_length=5, null=True)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('tractce', models.CharField(blank=True, max_length=6, null=True)),
                ('blkgrpce', models.CharField(blank=True, max_length=1, null=True)),
                ('blockce', models.CharField(blank=True, max_length=4, null=True)),
                ('cousubfp', models.CharField(blank=True, max_length=5, null=True)),
                ('submcdfp', models.CharField(blank=True, max_length=5, null=True)),
                ('conctyfp', models.CharField(blank=True, max_length=5, null=True)),
                ('placefp', models.CharField(blank=True, max_length=5, null=True)),
                ('aiannhfp', models.CharField(blank=True, max_length=5, null=True)),
                ('aiannhce', models.CharField(blank=True, max_length=4, null=True)),
                ('comptyp', models.CharField(blank=True, max_length=1, null=True)),
                ('trsubfp', models.CharField(blank=True, max_length=5, null=True)),
                ('trsubce', models.CharField(blank=True, max_length=3, null=True)),
                ('anrcfp', models.CharField(blank=True, max_length=5, null=True)),
                ('ttractce', models.CharField(blank=True, max_length=6, null=True)),
                ('tblkgpce', models.CharField(blank=True, max_length=1, null=True)),
                ('elsdlea', models.CharField(blank=True, max_length=5, null=True)),
                ('scsdlea', models.CharField(blank=True, max_length=5, null=True)),
                ('unsdlea', models.CharField(blank=True, max_length=5, null=True)),
                ('uace', models.CharField(blank=True, max_length=5, null=True)),
                ('cd111fp', models.CharField(blank=True, max_length=2, null=True)),
                ('sldust', models.CharField(blank=True, max_length=3, null=True)),
                ('sldlst', models.CharField(blank=True, max_length=3, null=True)),
                ('vtdst', models.CharField(blank=True, max_length=6, null=True)),
                ('zcta5ce', models.CharField(blank=True, max_length=5, null=True)),
                ('tazce', models.CharField(blank=True, max_length=6, null=True)),
                ('ugace', models.CharField(blank=True, max_length=5, null=True)),
                ('puma5ce', models.CharField(blank=True, max_length=5, null=True)),
                ('csafp', models.CharField(blank=True, max_length=3, null=True)),
                ('cbsafp', models.CharField(blank=True, max_length=5, null=True)),
                ('metdivfp', models.CharField(blank=True, max_length=5, null=True)),
                ('cnectafp', models.CharField(blank=True, max_length=3, null=True)),
                ('nectafp', models.CharField(blank=True, max_length=5, null=True)),
                ('nctadvfp', models.CharField(blank=True, max_length=5, null=True)),
                ('lwflag', models.CharField(blank=True, max_length=1, null=True)),
                ('offset', models.CharField(blank=True, max_length=1, null=True)),
                ('atotal', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
                ('tractce20', models.CharField(blank=True, max_length=6, null=True)),
                ('blkgrpce20', models.CharField(blank=True, max_length=1, null=True)),
                ('blockce20', models.CharField(blank=True, max_length=4, null=True)),
                ('countyfp20', models.CharField(blank=True, max_length=3, null=True)),
                ('statefp20', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'faces',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Featnames',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('tlid', models.BigIntegerField(blank=True, null=True)),
                ('fullname', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('predirabrv', models.CharField(blank=True, max_length=15, null=True)),
                ('pretypabrv', models.CharField(blank=True, max_length=50, null=True)),
                ('prequalabr', models.CharField(blank=True, max_length=15, null=True)),
                ('sufdirabrv', models.CharField(blank=True, max_length=15, null=True)),
                ('suftypabrv', models.CharField(blank=True, max_length=50, null=True)),
                ('sufqualabr', models.CharField(blank=True, max_length=15, null=True)),
                ('predir', models.CharField(blank=True, max_length=2, null=True)),
                ('pretyp', models.CharField(blank=True, max_length=3, null=True)),
                ('prequal', models.CharField(blank=True, max_length=2, null=True)),
                ('sufdir', models.CharField(blank=True, max_length=2, null=True)),
                ('suftyp', models.CharField(blank=True, max_length=3, null=True)),
                ('sufqual', models.CharField(blank=True, max_length=2, null=True)),
                ('linearid', models.CharField(blank=True, max_length=22, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('paflag', models.CharField(blank=True, max_length=1, null=True)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'featnames',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeocodeSettings',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('setting', models.TextField(blank=True, null=True)),
                ('unit', models.TextField(blank=True, null=True)),
                ('category', models.TextField(blank=True, null=True)),
                ('short_desc', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'geocode_settings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeocodeSettingsDefault',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('setting', models.TextField(blank=True, null=True)),
                ('unit', models.TextField(blank=True, null=True)),
                ('category', models.TextField(blank=True, null=True)),
                ('short_desc', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'geocode_settings_default',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='KittingRecipe',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'kitting_recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoaderLookuptables',
            fields=[
                ('process_order', models.IntegerField()),
                ('lookup_name', models.TextField(db_comment='This is the table name to inherit from and suffix of resulting output table -- how the table will be named --  edges here would mean -- ma_edges , pa_edges etc. except in the case of national tables. national level tables have no prefix', primary_key=True, serialize=False)),
                ('table_name', models.TextField(blank=True, db_comment='suffix of the tables to load e.g.  edges would load all tables like *edges.dbf(shp)  -- so tl_2010_42129_edges.dbf .  ', null=True)),
                ('single_mode', models.BooleanField()),
                ('load', models.BooleanField(db_comment="Whether or not to load the table.  For states and zcta5 (you may just want to download states10, zcta510 nationwide file manually) load your own into a single table that inherits from tiger.states, tiger.zcta5.  You'll get improved performance for some geocoding cases.")),
                ('level_county', models.BooleanField()),
                ('level_state', models.BooleanField()),
                ('level_nation', models.BooleanField(db_comment='These are tables that contain all data for the whole US so there is just a single file')),
                ('post_load_process', models.TextField(blank=True, null=True)),
                ('single_geom_mode', models.BooleanField(blank=True, null=True)),
                ('insert_mode', models.CharField(max_length=1)),
                ('pre_load_process', models.TextField(blank=True, null=True)),
                ('columns_exclude', models.TextField(blank=True, db_comment='List of columns to exclude as an array. This is excluded from both input table and output table and rest of columns remaining are assumed to be in same order in both tables. gid, geoid,cpi,suffix1ce are excluded if no columns are specified.', null=True)),
                ('website_root_override', models.TextField(blank=True, db_comment='Path to use for wget instead of that specified in year table.  Needed currently for zcta where they release that only for 2000 and 2010', null=True)),
            ],
            options={
                'db_table': 'loader_lookuptables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoaderPlatform',
            fields=[
                ('os', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('declare_sect', models.TextField(blank=True, null=True)),
                ('pgbin', models.TextField(blank=True, null=True)),
                ('wget', models.TextField(blank=True, null=True)),
                ('unzip_command', models.TextField(blank=True, null=True)),
                ('psql', models.TextField(blank=True, null=True)),
                ('path_sep', models.TextField(blank=True, null=True)),
                ('loader', models.TextField(blank=True, null=True)),
                ('environ_set_command', models.TextField(blank=True, null=True)),
                ('county_process_command', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'loader_platform',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoaderVariables',
            fields=[
                ('tiger_year', models.CharField(max_length=4, primary_key=True, serialize=False)),
                ('website_root', models.TextField(blank=True, null=True)),
                ('staging_fold', models.TextField(blank=True, null=True)),
                ('data_schema', models.TextField(blank=True, null=True)),
                ('staging_schema', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'loader_variables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NestMovementDetectionLidarconfig',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('lidars_on', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nest_movement_detection_lidarconfig',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NestMovementDetectionNestmovementresult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('reference', models.JSONField(blank=True, null=True)),
                ('intermediate', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nest_movement_detection_nestmovementresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PagcGaz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq', models.IntegerField(blank=True, null=True)),
                ('word', models.TextField(blank=True, null=True)),
                ('stdword', models.TextField(blank=True, null=True)),
                ('token', models.IntegerField(blank=True, null=True)),
                ('is_custom', models.BooleanField()),
            ],
            options={
                'db_table': 'pagc_gaz',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PagcLex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq', models.IntegerField(blank=True, null=True)),
                ('word', models.TextField(blank=True, null=True)),
                ('stdword', models.TextField(blank=True, null=True)),
                ('token', models.IntegerField(blank=True, null=True)),
                ('is_custom', models.BooleanField()),
            ],
            options={
                'db_table': 'pagc_lex',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PagcRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.TextField(blank=True, null=True)),
                ('is_custom', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pagc_rules',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('placefp', models.CharField(blank=True, max_length=5, null=True)),
                ('placens', models.CharField(blank=True, max_length=8, null=True)),
                ('plcidfp', models.CharField(max_length=7, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('namelsad', models.CharField(blank=True, max_length=100, null=True)),
                ('lsad', models.CharField(blank=True, max_length=2, null=True)),
                ('classfp', models.CharField(blank=True, max_length=2, null=True)),
                ('cpi', models.CharField(blank=True, max_length=1, null=True)),
                ('pcicbsa', models.CharField(blank=True, max_length=1, null=True)),
                ('pcinecta', models.CharField(blank=True, max_length=1, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.BigIntegerField(blank=True, null=True)),
                ('awater', models.BigIntegerField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'place',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceLookup',
            fields=[
                ('st_code', models.IntegerField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('pl_code', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=90, null=True)),
            ],
            options={
                'db_table': 'place_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlyInspectionInspectionconfig',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('inspection_on', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ply_inspection_inspectionconfig',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlyInspectionInspectionresult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField()),
                ('success', models.BooleanField()),
                ('inspection_dx', models.FloatField()),
                ('inspection_dy', models.FloatField()),
                ('inspection_da', models.FloatField()),
                ('intersection_over_union', models.FloatField()),
                ('ply_contours', models.JSONField(blank=True, null=True)),
                ('design_contours', models.JSONField(blank=True, null=True)),
                ('marker_positions', models.JSONField(blank=True, null=True)),
                ('marker_positions_empty_ee', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ply_inspection_inspectionresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlyInspectionTcpcalibration',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(max_length=20)),
                ('date_started', models.DateTimeField()),
                ('date_step1_complete', models.DateTimeField(blank=True, null=True)),
                ('date_step2_complete', models.DateTimeField(blank=True, null=True)),
                ('date_finished', models.DateTimeField(blank=True, null=True)),
                ('date_aborted', models.DateTimeField(blank=True, null=True)),
                ('tcp_offset_x', models.FloatField(blank=True, null=True)),
                ('tcp_offset_y', models.FloatField(blank=True, null=True)),
                ('tcp_angle', models.FloatField(blank=True, null=True)),
                ('field_marker_loc_empty_ee', models.JSONField(blank=True, db_column='_marker_loc_empty_ee', null=True)),
                ('field_marker_loc_step1', models.JSONField(blank=True, db_column='_marker_loc_step1', null=True)),
                ('field_marker_loc_step2', models.JSONField(blank=True, db_column='_marker_loc_step2', null=True)),
                ('field_marker_loc_step3', models.JSONField(blank=True, db_column='_marker_loc_step3', null=True)),
                ('field_tcp_offset_x_error', models.FloatField(blank=True, db_column='_tcp_offset_x_error', null=True)),
                ('field_tcp_offset_y_error', models.FloatField(blank=True, db_column='_tcp_offset_y_error', null=True)),
                ('field_tcp_angle_error', models.FloatField(blank=True, db_column='_tcp_angle_error', null=True)),
                ('field_tcp_offset_rot_avg', models.FloatField(blank=True, db_column='_tcp_offset_rot_avg', null=True)),
                ('field_tcp_offset_rot_error', models.FloatField(blank=True, db_column='_tcp_offset_rot_error', null=True)),
            ],
            options={
                'db_table': 'ply_inspection_tcpcalibration',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PreformingRecipe',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('date_created', models.DateTimeField()),
            ],
            options={
                'db_table': 'preforming_recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SecondaryUnitLookup',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('abbrev', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'db_table': 'secondary_unit_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialRefSys',
            fields=[
                ('srid', models.IntegerField(primary_key=True, serialize=False)),
                ('auth_name', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_srid', models.IntegerField(blank=True, null=True)),
                ('srtext', models.CharField(blank=True, max_length=2048, null=True)),
                ('proj4text', models.CharField(blank=True, max_length=2048, null=True)),
            ],
            options={
                'db_table': 'spatial_ref_sys',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('region', models.CharField(blank=True, max_length=2, null=True)),
                ('division', models.CharField(blank=True, max_length=2, null=True)),
                ('statefp', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('statens', models.CharField(blank=True, max_length=8, null=True)),
                ('stusps', models.CharField(max_length=2, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('lsad', models.CharField(blank=True, max_length=2, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.BigIntegerField(blank=True, null=True)),
                ('awater', models.BigIntegerField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'state',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StateLookup',
            fields=[
                ('st_code', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True, unique=True)),
                ('abbrev', models.CharField(blank=True, max_length=3, null=True, unique=True)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True, unique=True)),
            ],
            options={
                'db_table': 'state_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StreetTypeLookup',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('abbrev', models.CharField(blank=True, max_length=50, null=True)),
                ('is_hw', models.BooleanField()),
            ],
            options={
                'db_table': 'street_type_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tabblock',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('tractce', models.CharField(blank=True, max_length=6, null=True)),
                ('blockce', models.CharField(blank=True, max_length=4, null=True)),
                ('tabblock_id', models.CharField(max_length=16, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('ur', models.CharField(blank=True, max_length=1, null=True)),
                ('uace', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.FloatField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tabblock',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tabblock20',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('tractce', models.CharField(blank=True, max_length=6, null=True)),
                ('blockce', models.CharField(blank=True, max_length=4, null=True)),
                ('geoid', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=10, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('ur', models.CharField(blank=True, max_length=1, null=True)),
                ('uace', models.CharField(blank=True, max_length=5, null=True)),
                ('uatype', models.CharField(blank=True, max_length=1, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.FloatField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tabblock20',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Topology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('srid', models.IntegerField()),
                ('precision', models.FloatField()),
                ('hasz', models.BooleanField()),
            ],
            options={
                'db_table': 'topology',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tract',
            fields=[
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('tractce', models.CharField(blank=True, max_length=6, null=True)),
                ('tract_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=7, null=True)),
                ('namelsad', models.CharField(blank=True, max_length=20, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.FloatField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tract',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Zcta5',
            fields=[
                ('statefp', models.CharField(max_length=2)),
                ('zcta5ce', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('classfp', models.CharField(blank=True, max_length=2, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.FloatField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('partflg', models.CharField(blank=True, max_length=1, null=True)),
                ('the_geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'zcta5',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZipLookup',
            fields=[
                ('zip', models.IntegerField(primary_key=True, serialize=False)),
                ('st_code', models.IntegerField(blank=True, null=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('co_code', models.IntegerField(blank=True, null=True)),
                ('county', models.CharField(blank=True, max_length=90, null=True)),
                ('cs_code', models.IntegerField(blank=True, null=True)),
                ('cousub', models.CharField(blank=True, max_length=90, null=True)),
                ('pl_code', models.IntegerField(blank=True, null=True)),
                ('place', models.CharField(blank=True, max_length=90, null=True)),
                ('cnt', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'zip_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZipLookupAll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip', models.IntegerField(blank=True, null=True)),
                ('st_code', models.IntegerField(blank=True, null=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('co_code', models.IntegerField(blank=True, null=True)),
                ('county', models.CharField(blank=True, max_length=90, null=True)),
                ('cs_code', models.IntegerField(blank=True, null=True)),
                ('cousub', models.CharField(blank=True, max_length=90, null=True)),
                ('pl_code', models.IntegerField(blank=True, null=True)),
                ('place', models.CharField(blank=True, max_length=90, null=True)),
                ('cnt', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'zip_lookup_all',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZipLookupBase',
            fields=[
                ('zip', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, max_length=40, null=True)),
                ('county', models.CharField(blank=True, max_length=90, null=True)),
                ('city', models.CharField(blank=True, max_length=90, null=True)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'zip_lookup_base',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZipState',
            fields=[
                ('zip', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('stusps', models.CharField(max_length=2)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'zip_state',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZipStateLoc',
            fields=[
                ('zip', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('stusps', models.CharField(max_length=2)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('place', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'zip_state_loc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('topology', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='monorepo.topology')),
                ('layer_id', models.IntegerField()),
                ('schema_name', models.CharField(max_length=50)),
                ('table_name', models.CharField(max_length=50)),
                ('feature_column', models.CharField(max_length=50)),
                ('feature_type', models.IntegerField()),
                ('level', models.IntegerField()),
                ('child_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'layer',
                'managed': False,
            },
        ),
    ]
